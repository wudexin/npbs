package com.nantian.npbs.test.gateway.camel;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.nantian.npbs.common.utils.ConvertUtils;

public class SocketClient {
	private static final Logger logger = LoggerFactory
			.getLogger(SocketClient.class);

	private final static ThreadLocal<Socket> sockPool = new ThreadLocal<Socket>();

	/** 决定客户端采用长连接还是短连接的方式 */
	private static final boolean KEEP_CONNECTION = false;

	public static void main(String args[]) throws Exception {
	
		SocketClient sc = new SocketClient();
		byte[] body = null;
		String  payHexString = null;		
		payHexString = sc.getPosPackByTradeCode("008002");
		body = ConvertUtils.hexStr2Bytes(payHexString);
		sendSopBuffer(body);	

	}

	public static byte[] sendSopBuffer(byte[] buf) throws Exception {

		// 通过Socket连接服务器
		Socket server = getSocket();

		// 创建网络输出流输出内容到服务器上
		OutputStream netOut = server.getOutputStream();
		OutputStream dataOut = new BufferedOutputStream(netOut);

		byte[] serverbuf = new byte[2048];

		try {
			dataOut.write(buf, 0, buf.length);// 把文件数据写出网络缓冲区
			dataOut.flush();// 刷新缓冲区把数据写往服务器端

			InputStream netIn = server.getInputStream();
			InputStream dataIn = new BufferedInputStream(netIn);

			int servernum = dataIn.read(serverbuf);
			logger.info("从服务器读取的数据长度：{}" , servernum);
			if (servernum <= 0)
				throw new Exception("未能从前置读取有效数据！");

			/*
			 * while (servernum != (-1)) {
			 * logger.debug("continue reading from socket..."); servernum =
			 * dataIn.read(serverbuf);// 继续从网络中读取数据 }
			 */

			// 得到成功标志
			byte[] tmp = new byte[servernum];
			for (int i = 0; i < servernum; i++) {
				tmp[i] = serverbuf[i];
			}
			logger.info("result:{}" ,new String(tmp));
			String ansHexString = ConvertUtils.bytes2HexStr(tmp);
			logger.info("result-hex, length[:{}]:{}" , ansHexString.length() , ansHexString);

		} catch (Exception e) {
			closeSocket();
			throw (e);
		} finally {
			if (!KEEP_CONNECTION) {
				closeSocket();
			}
		}

		return serverbuf;
	}

	private static Socket getSocket() throws UnknownHostException, IOException {
		Socket s = (Socket) sockPool.get();
		if (s == null || s.isClosed()) {
			logger.debug("s==null is " + (s == null));
			if (s != null)
				logger.debug("is closed:" + s.isClosed());
			s = reconnect();
			sockPool.set(s);
		}
		logger.info("Socket= {}" + s.hashCode());
		return s;
	}

	private static Socket reconnect() throws UnknownHostException, IOException {
		logger.debug("recreating socket...");
		String serverIp = "127.0.0.1";	
		int serverPort = 8884;
		/*String serverIp = "10.232.6.210";
		int serverPort = 8884;*/
		Socket s = new Socket(serverIp, serverPort);
		s.setSoTimeout(10000000);
		logger.debug("socket recreated");
		return s;
	}

	public static void closeSocket() throws IOException {
		Socket s = (Socket) sockPool.get();
		sockPool.set(null);
		if (s != null && !s.isClosed()) {
			s.close();
		}
	}
	
	public String getPosPackByTradeCode(String tradeCode) {
		if("012001".equals(tradeCode)) {
			return "01aa600018000060220000087502000020000100caaee7dafd5f5";
		}else if ("012002".equals(tradeCode)) {
			return "02a260001800006022000008750200502200810cc0921100000000000100000047313030303030303030303030303030300000001203070002127506b6c5c1a2b7e52020202020202020202020202020202020202020303731303030303120202020202020202020202031353677192257e4bab6c5c1a2b7e5202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020b6abc8fdbdccb4f3bdd6bbaab3c7c2ccd6ded0a1c7f8332d332d3135303320202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203031303030303030303030303030302e303030303030302e30303133343031202020202020202020202030323030302e303030303030302e30300120027d327840fee026c1";
		}else if("012023".equals(tradeCode)) {
			return "01d2600018000060100000000002000022008108ce3b1fd347f07480f";
		}else if("012012".equals(tradeCode)){
			return "01bf600018000060220000087502005020000100cf526afabd11c4778";			
		}else if("010001".equals(tradeCode)){
			return "012a600018000060220000087502000020000100c082110003120016303138463942353131393635323544364d4f44454d3a2020202000002020202020202020303535313030323720202020202020202020202031353602003437333432343030303030303139303330303030323541363743463332314139374545453031384639423531313936353235443630303030303030303030303030303030303030333030303030303539303030303030353930303030303030303030303030303030303130303030303030303030303030303030303030303030303030303030303030303030303030302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020010001ce6914b43705dea9";
		}else if("001001".equals(tradeCode)){
			return "005b600018000060220000087502000020000100c0801100031600113132333435363738393132202020202020202020202020202020202020202030353531303032372020202020202020202020203135360010014f168653e11538fa";
		}else if("001002".equals(tradeCode)){
			return "008960001800006022000008750200502200810cc09011000000000001000003173130303030303030303030303030303000001131323334353637383931321203090002314106cbefd3c0c7bf2020202020202020202020202020202020202020303535313030323720202020202020202020202031353682175b704f17c508001002e363cf2009be17c5";
		}else if("009001".equals(tradeCode)){
			return "005c600018000060220000087502000020000100c08011000312001230313032303030303132333420202020202020202020202020202020202020203035353130303237202020202020202020202020313536009001bb1de335f6701945";
		}else if("009002".equals(tradeCode)){
			return "008460001800006022000008750200502200810cc09011000000000001000003133130303030303030303030303030303000001230313032303030303132333412030900023137002020202020202020202020202020202020202020303535313030323720202020202020202020202031353682175b704f17c508009002de87121c5758cfd5";
		}else if("008001".equals(tradeCode)) {
			return "005f600018000060220000087502000020000100c08011000026001534303030323030313031303830323020202020202020202020202020202020202020203035303038383838202020202020202020202020313536008001d594c5f5a01d0981";			
		}else if("008002".equals(tradeCode)) {
			return "008d60001800006022000008750200502200810cc0901100000000001000000027313030303030303030303030303030300000153430303032303031303130383032301203140019969206c2edb4bab7ef20202020202020202020202020202020202020203035303038383838202020202020202020202020313536d410c3c165ed00dd00800211d875dd2e9781f5";
		}else{ 
			return "";
		}
	}
	
	public String[]  hasTradeCode() {
		String tradeCode[]  = {
				"001001",
				"001002",
				"009001",
				"009002",
		};
		
		return tradeCode;		
	}
}


